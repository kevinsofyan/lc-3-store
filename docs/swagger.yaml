basePath: /
definitions:
  models.Cart:
    properties:
      cart_id:
        type: integer
      created_at:
        type: string
      product_id:
        type: integer
      quantity:
        type: integer
      user_id:
        type: integer
    type: object
  models.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.LoginSuccess:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  models.Order:
    properties:
      created_at:
        type: string
      order_id:
        type: integer
      total_price:
        type: number
      user_id:
        type: integer
    type: object
  models.Product:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: number
      product_id:
        type: integer
    type: object
  models.User:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      user_id:
        type: integer
    type: object
host: orders-lc3-717e5d36a486.herokuapp.com
info:
  contact:
    name: Benedict Kevin Sofyan /kevinsofyan.13@gmail.com
  title: FTGO Phase 2 Livecode 3 - Kevin Sofyan
  version: "1.0"
paths:
  /products:
    get:
      description: menampilkan semua data product yang tersedia
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: menampilkan semua data product yang tersedia
      tags:
      - product
  /products/{id}:
    get:
      description: menampilkan semua data product sesuai dengan id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: menampilkan data product sesuai dengan id
      tags:
      - product
  /users/carts:
    get:
      description: menampilkan seluruh data cart
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Cart'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: menampilkan seluruh data cart
      tags:
      - cart
    post:
      description: menambahkan data cart
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Cart
        in: body
        name: cart
        required: true
        schema:
          $ref: '#/definitions/models.Cart'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: menambahkan data cart
      tags:
      - cart
  /users/login:
    post:
      consumes:
      - application/json
      description: login user yang sebelumnya sudah berhasil melakukan registrasi,
        akan membalikan data akses token
      parameters:
      - description: Login Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: login user yang sudah terdaftar
      tags:
      - user
  /users/orders:
    get:
      description: menampilkan seluruh data order
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Order'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: menampilkan seluruh data order
      tags:
      - order
    post:
      description: membuat data order baru berdasarkan data product yang tersimpan
        pada carts
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: membuat data order
      tags:
      - order
  /users/register:
    post:
      consumes:
      - application/json
      description: register user baru ke dalam aplikasi
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: register user baru
      tags:
      - user
swagger: "2.0"
